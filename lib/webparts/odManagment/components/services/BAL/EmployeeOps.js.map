{"version":3,"sources":["webparts/odManagment/components/services/BAL/EmployeeOps.ts"],"names":[],"mappings":"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","file":"webparts/odManagment/components/services/BAL/EmployeeOps.js","sourcesContent":["import { IOdManagmentProps } from '../interfaces/IOdManagmentProps';\r\nimport { IEmployee } from '../interfaces/IEmployee';\r\nimport SPCRUDOPS from '../DAL/spcrudops';\r\n\r\n\r\n\r\nexport interface EmployeeOps {\r\n    getEmployee( props: IOdManagmentProps): Promise<IOdManagmentProps>;\r\n    getGroupHeads( props: IOdManagmentProps): Promise<IOdManagmentProps>;\r\n    getSubGroups( props: IOdManagmentProps): Promise<IOdManagmentProps>;\r\n    getUserProfile( props: IOdManagmentProps): Promise<IOdManagmentProps>;\r\n}\r\n\r\nexport default function EmployeeOps() {\r\n    const spCrudOps = new SPCRUDOPS();\r\n        const getGroups=(groupArray)=>{\r\n            let groups= \"\";\r\n            groupArray.forEach(element => {\r\n                groups =groups+ (groups==\"\"?element.ShortName:\",\"+element.ShortName)\r\n            });\r\n            return groups;\r\n        }\r\n        const getEmployee = async (props: IOdManagmentProps): Promise<IEmployee> => {\r\n            debugger;\r\n            var currentUserLogin=(props.currentSPContext.pageContext._user._displayName==\"spfarmadmin\")?\"developer3@eximbankindia.in\":props.currentSPContext.pageContext._user._email;\r\n            //props.currentSPContext.pageContext._user._email;\r\n                return await (await spCrudOps).getRootData(\"EmployeeMaster\"\r\n                    , \"*,Designation/Title,LeaveLevel1/Title,LeaveLevel2/Title,LeaveLevel2/Id,SubGroup/ShortName,CurrentOfficeLocation/Title\"\r\n                    , \"SubGroup,Designation,LeaveLevel1,LeaveLevel2,CurrentOfficeLocation\"\r\n                    , \"(CompanyEmail eq '\"+(currentUserLogin)+\"')\"\r\n                    , { column: 'Id', isAscending: false }, props).then(results => {\r\n                        //console.log(results);\r\n                        let employees: Array<IEmployee> = new Array<IEmployee>();\r\n                        results.map(item => {\r\n                            employees.push({\r\n                            Title:item.Title,\r\n                            ID:item.ID.toString(),\r\n                            EmployeeTitle:item.EmployeeTitle,\r\n                            FirstName:item.FirstName,\r\n                            MiddleName:item.MiddleName,\r\n                            LastName:item.LastName,\r\n                            UserName:item.UserNameId,\r\n                            Gender:item.Gender,\r\n                            OfficeLocation:item.OfficeLocation,\r\n                            CurrentOfficeLocation:item.CurrentOfficeLocation.Title,\r\n                            SubGroup:(item.SubGroup.length>0 ? getGroups(item.SubGroup):\"\"),\r\n                            Unit:item.Unit,\r\n                            EmployeeType:item.EmployeeType,\r\n                            Scale:item.Scale,\r\n                            Grade:item.Grade,\r\n                            Designation:item.Designation.Title,\r\n                            Payscale:item.Payscale,\r\n                            ReportingManager:item.ReportingManager,\r\n                            AlternateReportingManager:item.AlternateReportingManager,\r\n                            Active:item.Active,\r\n                            Phone_x0020_No:item.Phone_x0020_No,\r\n                            MobileNo_x002e_:item.MobileNo_x002e_,\r\n                            CompanyEmail:item.CompanyEmail,\r\n                            AlternateEmail:item.AlternateEmail,\r\n                            LeaveLevel1:item.LeaveLevel1.Title,\r\n                            LeaveLevel2:item.LeaveLevel2.Title,\r\n                            LeaveLevel2Id:item.LeaveLevel2Id,\r\n                            Role:item.Role,\r\n                            BranchName:item.BranchName,\r\n                            HHApproverName:item.HHApproverName,\r\n                            LTCDate:item.LTCDate,\r\n                            TempDOB:item.TempDOB,\r\n                            EmpType:item.EmpType\r\n                            });\r\n                        });\r\n    \r\n                        return employees[0];\r\n                    });\r\n        };\r\n        const getGroupHeads = async (props: IOdManagmentProps): Promise<IEmployee[]> => {\r\n                return await (await spCrudOps).getRootData(\"EmployeeMaster\"\r\n                    , \"*,Designation/Title,LeaveLevel1/Title,LeaveLevel2/Title,LeaveLevel2/Id,SubGroup/ShortName,CurrentOfficeLocation/Title\"\r\n                    , \"SubGroup,Designation,LeaveLevel1,LeaveLevel2,CurrentOfficeLocation\"\r\n                    , \"((Role eq 'Group Head') or (Role eq 'Regional Head')) and (Active eq 1)\"\r\n                    , { column: 'Id', isAscending: false }, props).then(results => {\r\n                        console.log(results);\r\n                        let employees: Array<IEmployee> = new Array<IEmployee>();\r\n                        results.map(item => {\r\n                            employees.push({\r\n                            Title:item.Title,\r\n                            ID:item.ID,\r\n                            EmployeeTitle:item.EmployeeTitle,\r\n                            FirstName:item.FirstName,\r\n                            MiddleName:item.MiddleName,\r\n                            LastName:item.LastName,\r\n                            UserName:item.UserName,\r\n                            Gender:item.Gender,\r\n                            OfficeLocation:item.OfficeLocation,\r\n                            CurrentOfficeLocation:item.CurrentOfficeLocation.Title,\r\n                            SubGroup:(item.SubGroup.length>0 ? getGroups(item.SubGroup):\"\"),\r\n                            Unit:item.Unit,\r\n                            EmployeeType:item.EmployeeType,\r\n                            Scale:item.Scale,\r\n                            Grade:item.Grade,\r\n                            Designation:item.Designation.Title,\r\n                            Payscale:item.Payscale,\r\n                            ReportingManager:item.ReportingManager,\r\n                            AlternateReportingManager:item.AlternateReportingManager,\r\n                            Active:item.Active,\r\n                            Phone_x0020_No:item.Phone_x0020_No,\r\n                            MobileNo_x002e_:item.MobileNo_x002e_,\r\n                            CompanyEmail:item.CompanyEmail,\r\n                            AlternateEmail:item.AlternateEmail,\r\n                            LeaveLevel1:item.LeaveLevel1.Title,\r\n                            LeaveLevel2:item.LeaveLevel2.Title,\r\n                            LeaveLevel2Id:item.LeaveLevel2Id,\r\n                            Role:item.Role,\r\n                            BranchName:item.BranchName,\r\n                            HHApproverName:item.HHApproverName,\r\n                            LTCDate:item.LTCDate,\r\n                            TempDOB:item.TempDOB,\r\n                            EmpType:item.EmpType\r\n                            });\r\n                        });\r\n    \r\n                        return employees;\r\n                    });\r\n        };\r\n        const getSubGroups = async (props: IOdManagmentProps): Promise<any> => {\r\n            return await (await spCrudOps).getRootData(\"Sub Group Master\"\r\n                , \"*\"\r\n                , \"\"\r\n                , \"\"\r\n                , { column: 'Id', isAscending: false }, props).then(results => {\r\n                    console.log(results);\r\n                    return results;\r\n                });\r\n    };\r\n    const getUserProfile = async (props: IOdManagmentProps): Promise<any> => {\r\n        return await (await spCrudOps).getUserProfile(props);\r\n};\r\n    return {\r\n        getEmployee\r\n        ,getGroupHeads\r\n        ,getSubGroups\r\n        ,getUserProfile\r\n        //,insertTravelData\r\n    };\r\n}"],"sourceRoot":"../../../../../../src"}